from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from states import Register
from file_db import is_registered, register_user, delete_user
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.inline_kb import server_keyboard, roles_keyboard
from config import ADMINS
from file_db import get_user_data
from aiogram import F, Router, types
from handlers.admin_commands import reglament, rules
router = Router()

@router.message(F.text == "/remove")
async def remove_profile_start(message: types.Message):
    if not is_registered(message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_remove"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_remove")
        ]
    ])
    await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=kb)


@router.callback_query(F.data == "confirm_remove")
async def confirm_remove(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    success = delete_user(user_id)

    if success:
        await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–æ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.")
    else:
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

@router.callback_query(F.data == "cancel_remove")
async def cancel_remove(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
@router.message(F.text.startswith("/start"))
async def start(message: types.Message, state: FSMContext):
    args = message.text.split(maxsplit=1)

    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∞—Ä–≥—É–º–µ–Ω—Ç /start rules –∏–ª–∏ /start reglament
    if len(args) > 1:
        param = args[1].lower()
        if param == "reglament":
            await reglament(message)
            return
        elif param == "rules":
            await rules(message)
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if is_registered(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await state.set_state(Register.nickname)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ:")
@router.message(Register.nickname)
async def get_nickname(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await state.set_state(Register.game_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –∏–∑ –∏–≥—Ä—ã:")

@router.message(Register.game_id)
async def get_game_id(message: types.Message, state: FSMContext):
    await state.update_data(game_id=message.text)
    await state.set_state(Register.server)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–µ—Ä–≤–µ—Ä:", reply_markup=server_keyboard())

@router.callback_query(F.data.startswith("server_"))
async def choose_server(callback: types.CallbackQuery, state: FSMContext):
    server = callback.data.split("_")[1].upper()
    await state.update_data(server=server)
    await state.set_state(Register.roles)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ä–æ–ª–∏ (–æ—Ç 1 –¥–æ 5):", reply_markup=roles_keyboard())

@router.callback_query(F.data.startswith("role_"))
async def toggle_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_", 1)[1]
    data = await state.get_data()
    selected = data.get("roles", [])
    if role in selected:
        selected.remove(role)
    elif len(selected) < 5:
        selected.append(role)
    await state.update_data(roles=selected)
    await callback.message.edit_reply_markup(reply_markup=roles_keyboard(selected))

@router.callback_query(F.data == "roles_done")
async def finish_roles(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("roles"):
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", show_alert=True)
        return

    user_id = callback.from_user.id
    register_user(user_id, data)

    text = (
        f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n"
        f"üë§ –ù–∏–∫: {data['nickname']}\n"
        f"üÜî ID: {data['game_id']}\n"
        f"üåç –°–µ—Ä–≤–µ—Ä: {data['server']}\n"
        f"üéÆ –†–æ–ª–∏: {', '.join(data['roles'])}\n"
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
    )

    from keyboards.inline_kb import approval_keyboard
    for admin in ADMINS:
        await callback.bot.send_message(admin, text, parse_mode="HTML", reply_markup=approval_keyboard(user_id))

    await callback.message.edit_text("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞.")
    await state.clear()


@router.message(F.text == "/profile")
async def profile(message: types.Message):
    user_id = message.from_user.id
    data = get_user_data(user_id)

    if not data:
        return await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

    text = (
        f"<b>üßæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üë§ –ù–∏–∫: <b>{data.get('nickname')}</b>\n"
        f"üÜî ID –∏–∑ –∏–≥—Ä—ã: <code>{data.get('game_id')}</code>\n"
        f"üåç –°–µ—Ä–≤–µ—Ä: {data.get('server')}\n"
        f"üéÆ –†–æ–ª–∏: {', '.join(data.get('roles', []))}\n"
        f"üîó Telegram: <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
    )

    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from config import ADMINS
from database import get_user, get_all_users
from keyboards.admin_filter import filter_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

@router.callback_query(F.data.startswith("approve_"))
async def approve(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await callback.message.edit_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞")
    await callback.bot.send_message(user_id, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

@router.callback_query(F.data.startswith("reject_"))
async def reject(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await callback.message.edit_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await callback.bot.send_message(user_id, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@router.message(F.text.startswith("/reglament"))
async def reglament(message: types.Message):
    text = (
        "üìú <b>–†–µ–≥–ª–∞–º–µ–Ω—Ç —É—á–∞—Å—Ç–∏—è –≤ –º–∞—Ç—á–∞—Ö Valhalla Gaming</b>\n\n"
        "‚ùì <b>–ß—Ç–æ —Ç–∞–∫–æ–µ Valhalla Gaming?</b>\n"
        "Valhalla Gaming ‚Äî —ç—Ç–æ —Å–µ—Ä–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π...\n"
        "üîÅ <b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤?</b>\n"
        "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–æ–º...\n"
        "üèÜ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞?</b>\n"
        "üéØ <b>–ö–∞–∫ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã?</b>\n"
        "‚Ä¢ –£–±–∏–π—Å—Ç–≤–∞ (Kills)\n‚Ä¢ –ê—Å—Å–∏—Å—Ç—ã\n‚Ä¢ –ü–æ–±–µ–¥–∞ –≤ –º–∞—Ç—á–µ...\n"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "/rules")
async def rules(message: types.Message):
    text = (
        "üìè <b>–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Valhalla Gaming</b>\n\n"
        "üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n‚Ä¢ –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å\n‚Ä¢ –ß–∏—Ç—ã\n‚Ä¢ –û–±–º–∞–Ω\n\n"
        "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</b>\n‚Ä¢ –£–≤–∞–∂–µ–Ω–∏–µ\n‚Ä¢ –ß–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞\n\n"
        "üõ°Ô∏è <b>–ù–∞–∫–∞–∑–∞–Ω–∏—è:</b>\n‚Ä¢ –í–∞—Ä–Ω—ã, –±–∞–Ω—ã –∏ –ø–µ—Ä–º–∞–±–∞–Ω—ã\n"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(F.text.startswith("/sendall"))
async def sendall(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    text = message.text.replace("/sendall", "").strip()
    if not text:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

    users = get_all_users()
    for user in users:
        try:
            await message.bot.send_message(user["telegram_id"], text)
        except:
            pass
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

@router.message(F.text.startswith("/users"))
async def list_users(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    args = message.text.strip().lower().split()[1:]
    all_users = get_all_users()
    if not all_users:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    if args and args[0] == "count":
        servers_count = {"RU": 0, "KZ": 0, "KRG": 0, "UZB": 0}
        for user in all_users:
            s = user.get("server", "").upper()
            if s in servers_count:
                servers_count[s] += 1
        total = sum(servers_count.values())
        text = "\n".join([f"{k}: {v}" for k, v in servers_count.items()])
        text += f"\n\n<b>–í—Å–µ–≥–æ: {total}</b>"
        return await message.answer(text, parse_mode="HTML")

    server_filter = None
    role_filters = []

    for arg in args:
        upper = arg.upper()
        if upper in ["RU", "KZ", "KRG", "UZB"]:
            server_filter = upper
        else:
            role_filters.append(arg.capitalize())

    msg_lines = []
    for user in all_users:
        uid = user["telegram_id"]
        roles = user.get("role", "")
        role_list = roles

        if server_filter and user.get("server") != server_filter:
            continue
        if role_filters and all(r not in roles for r in role_filters):
            continue

        msg_lines.append(
            f"üë§ <b>{user.get('nickname')}</b>\n"
            f"üÜî <code>{user.get('game_id')}</code>\n"
            f"üåç –°–µ—Ä–≤–µ—Ä: {user.get('server')}\n"
            f"üéÆ –†–æ–ª–∏: {role_list}\n"
            f"üîó <a href='tg://user?id={uid}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n‚Äî‚Äî‚Äî"
        )

    if not msg_lines:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    MAX_LENGTH = 4000
    text = ""
    for line in msg_lines:
        if len(text) + len(line) >= MAX_LENGTH:
            await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
            text = ""
        text += line + "\n"
    if text:
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

@router.message(F.text == "/filter_users")
async def show_filter_menu(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await state.update_data(server=None, roles=[])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=filter_keyboard())

@router.callback_query(F.data.startswith("filter_server_"))
async def toggle_server(callback: types.CallbackQuery, state: FSMContext):
    server = callback.data.split("_")[-1]
    await state.update_data(server=server)
    data = await state.get_data()
    await callback.message.edit_reply_markup(
        reply_markup=filter_keyboard(selected_server=server, selected_roles=data.get("roles", [])))
    await callback.answer()

@router.callback_query(F.data.startswith("filter_role_"))
async def toggle_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[-1]
    data = await state.get_data()
    selected = data.get("roles", [])
    if role in selected:
        selected.remove(role)
    else:
        selected.append(role)
    await state.update_data(roles=selected)
    await callback.message.edit_reply_markup(
        reply_markup=filter_keyboard(selected_server=data.get("server"), selected_roles=selected))
    await callback.answer()

@router.callback_query(F.data == "filter_show")
async def show_filtered_users(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    server_filter = data.get("server")
    role_filters = data.get("roles", [])
    users = get_all_users()

    msg_lines = []
    for user in users:
        uid = user["telegram_id"]
        if server_filter and user.get("server") != server_filter:
            continue
        if role_filters and all(r not in user.get("role", "") for r in role_filters):
            continue
        msg_lines.append(
            f"üë§ <b>{user.get('nickname')}</b>\n"
            f"üÜî <code>{user.get('game_id')}</code>\n"
            f"üåç {user.get('server')} | üéÆ {user.get('role')}\n"
            f"üîó <a href='tg://user?id={uid}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n‚Äî‚Äî‚Äî"
        )

    if not msg_lines:
        return await callback.message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.")

    text = ""
    MAX = 4000
    for line in msg_lines:
        if len(text) + len(line) > MAX:
            await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
            text = ""
        text += line + "\n"
    if text:
        await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

    await callback.answer()
